#!/usr/bin/env python3# -*- coding: utf-8 -*-"""@author: brendanmills"""import osimport tqdmimport matplotlib.pyplot as pltimport obspyfrom obspy import UTCDateTimefrom obspy.clients.fdsn import mass_downloaderfrom glob import globimport shutilfrom obspy import read, read_inventoryimport obspy as opyfrom obspy import UTCDateTimefrom obspy.clients.fdsn import Clientimport time#this is for looking at the onset tremor so the days are hardcoded for 177 and the times are relevant to the tremorstart_timer = time.time()t0 = UTCDateTime("2018-06-26T0:0:00.000")tdur=3600*24 # duration in seconds for one dayclient = Client("IRIS")#the first step is to download the data#first set up some path namesPROJECT_PATH = '/Users/brendanmills/Documents/Senior_Thesis/Data/Station_data/'DIRPATH_RAW = PROJECT_PATH + 'Raw/'DIRPATH_DESTINATION = PROJECT_PATH + 'Processed/'INV_PATH = PROJECT_PATH + 'Response/'sta_8G = ['SN04', 'SN05', 'SN07', 'SN11', 'SN12', 'SN13', 'SN14']#%% Gets waveforms from IRISst_array = opy.core.stream.Stream()st_array.append(client.get_waveforms("EC", 'SN06', "*", "HHZ", t0, t0 + tdur)[0])for sta in sta_8G:    st = client.get_waveforms("8G", sta, "*", "HHZ", t0, t0 + tdur)    st[0].attach_response()    st_array.append(st[0])st_array.write(DIRPATH_RAW + '8GEC.Array..HHZ.mseed')#%% Reads waveforms from fileos.chdir('/Users/brendanmills/Documents/Senior_Thesis/Data/Final/Raw')st_perm = opy.core.stream.Stream()for file in glob('*.177'):    st = read(file)    st_perm.append(st[0])print(st_perm)st_perm.write(DIRPATH_RAW + '8GEC.Perm..HHZ.mseed')st_all = st_arrayfor tr in st_perm:    st_all.append(tr)st_all.write(DIRPATH_RAW + '8GEC.All..HHZ.mseed')#%% Attach all the station responsesst_all = read('8GEC.All..HHZ.mseed')for tr in st_all:    net = tr.stats.network # get some initial stats    sta = tr.stats.station    if net == '8G':        inv = read_inventory(INV_PATH + f'8G.{sta}.xml')    elif net == 'EC' and sta == 'SN06':        inv = read_inventory(INV_PATH + f'EC.{sta}.xml')    else:        inv = read_inventory(INV_PATH + f'RESP.EC.{sta}..HHZ')    tr.attach_response(inv)#remove the responses just addedst_decon = st_all.copy()for tr in st_decon:    tr.remove_response()    st_decon.write(DIRPATH_DESTINATION + '8GEC.All..HHZ.Decon.mseed')#%%Filter, trim, and properly decimate the stream st_filt = st_decon.copy().filter('bandpass', freqmin=0.01, freqmax=12)st_filt.write(DIRPATH_DESTINATION + '8GEC.All..HHZ.Decon.filt1.mseed')t1 = UTCDateTime("2018-06-26T17:0:00.000")t2 = UTCDateTime("2018-06-26T21:0:00.000")st_trim = st_filt.trim(starttime=t1, endtime=t2)st_trim.write(DIRPATH_DESTINATION + '8GEC.All..HHZ.Decon.filt1.trim.mseed')st_decim = opy.core.stream.Stream()for tr in st_trim.copy():#decimate all traces to 25 Hz    if tr.stats.sampling_rate == 50:        st_decim.append(tr.decimate(2))    elif tr.stats.sampling_rate == 100:        st_decim.append(tr.decimate(4))st_decim.write(DIRPATH_DESTINATION + '8GEC.All..HHZ.Decon.filt1.trim.decim.mseed')