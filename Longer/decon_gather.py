#!/usr/bin/env python3# -*- coding: utf-8 -*-"""@author: brendanmillsThis is going to get the streams for longer preiods of"""import osimport tqdmimport matplotlib.pyplot as pltimport obspyfrom obspy import UTCDateTimefrom obspy.clients.fdsn import mass_downloaderfrom glob import globimport shutilfrom obspy import read, read_inventoryfrom obspy import UTCDateTimefrom obspy.clients.fdsn import Clientimport time#this is for looking at the onset tremor so the days are hardcoded for 177 and the times are relevant to the tremorstart_timer = time.time()t0 = UTCDateTime("2018-06-26T0:0:00.000")tday=3600*24 # duration in seconds for one dayclient = Client("IRIS")#the first step is to download the data#first set up some path namesPROJECT_PATH = '/Users/brendanmills/Documents/Senior_Thesis/Data/LongData/'DIRPATH_RAW = PROJECT_PATH + 'Raw/'DIRPATH_DECON = PROJECT_PATH + 'Decon/'DIRPATH_DESTINATION = DIRPATH_RAW #for the mass downloaderos.makedirs(DIRPATH_DESTINATION, exist_ok=True)# sta_8G = ['SN04', 'SN05', 'SN07', 'SN11', 'SN12', 'SN13', 'SN14']# st_array = opy.core.stream.Stream()#%% Gets waveforms from IRISdomain = mass_downloader.RectangularDomain(    minlatitude=-1.17,#south    maxlatitude=-0.45,#north    minlongitude=-91.45,#west    maxlongitude=-90.8,#east)# grid extent Longitude: 55.67째 to 55.81째 (145 points), Latitude: -21.3째 to -21.2째 (110 points)lon_min = domain.minlongitudelon_max = domain.maxlongitudelat_min = domain.minlatitudelat_max = domain.maxlatitudetdur = 31 * tdayrestrictions = mass_downloader.Restrictions(    starttime=t0,    endtime=t0 + tdur,    network="8G",    location="*",    chunklength_in_sec=tday,    channel="*HZ",    station='SN04,SN05,SN07,SN11,SN12,SN13,SN14',    reject_channels_with_gaps=False,    minimum_length=0.0,    minimum_interstation_distance_in_m=1.0,    channel_priorities=["HH[ZNE]", "BH[ZNE]"],)    downloader = mass_downloader.MassDownloader(providers=["IRIS"])# Downloaddownloader.download(    domain,    restrictions,    mseed_storage=DIRPATH_DESTINATION,    stationxml_storage=DIRPATH_DESTINATION,)#%% Go through the folder and decon them allfilepaths_raw = sorted(glob(os.path.join(DIRPATH_RAW, "*.mseed")))for f in filepaths_raw:    stream = read(f)    stream.merge()    print(stream)    stats = stream[0].stats    s = stats.starttime    start = f'{s.year}{s.month}{s.day}T{s.hour}{s.minute}{s.second}'    e = stats.endtime    end = f'{e.year}{e.month}{e.day}T{e.hour}{e.minute}{e.second}'        try:        d = read(DIRPATH_DECON + f'D.{stats.network}.{stats.station}..{stats.channel}__{start}Z__{end}Z.mseed')        print('Loaded')        continue    except:        inv = read_inventory(f'{DIRPATH_RAW}{stats.network}.{stats.station}.xml')        stream.remove_response(inventory=inv)        stream.write(DIRPATH_DECON + f'D.{stats.network}.{stats.station}..{stats.channel}__{start}Z__{end}Z.mseed')#%% Filteringfilepaths_decon = sorted(glob(os.path.join(DIRPATH_DECON, "D.*.mseed")))for f in tqdm.tqdm(filepaths_decon):    st_d = read(f)    stats = st_d[0].stats    s = stats.starttime    start = f'{s.year}{s.month}{s.day}T{s.hour}{s.minute}{s.second}'    e = stats.endtime    end = f'{e.year}{e.month}{e.day}T{e.hour}{e.minute}{e.second}'        #filter to the desired frequency range    st_f = st_d.copy().filter('bandpass', freqmin=0.01, freqmax=12)        #decimate to 25Hz    if stats.sampling_rate == 50:        print('Found a 50Hz!')        st_f.decimate(2)    elif stats.sampling_rate == 100:        st_f.decimate(4)        st_f.write(DIRPATH_DECON + f'F1.D.{stats.network}.{stats.station}..{stats.channel}__{start}Z__{end}Z.mseed')        